# -*- coding: utf-8 -*-
"""
Created on Fri Jul 12 10:47:35 2024

@author: ADHCS_User
"""

#%%

# print("Something, something I can't think of right now, but might need to do it later down the line.")

#%%


import test_file2
from collections import deque, defaultdict
from numpy.random import choice

# Simulate the outposts
sts = test_file2.define_graph()
# outposts = ["outpost_1", "outpost_2", "outpost_3", "outpost_4", "outpost_5"]
outposts = ["outpost_"+str(i) for i in range(1, len(sts) + 1)]

stations = {}
for i, outpost in enumerate(outposts):
    stations[outpost] = sts[i]
# Truck capacity for each item
truck_capacity = {
    "medicines": 100,
    "fuel": 500,
    "food": 300,
    "ammunations": 700
}


def define_stations():
    stations = {}
    for outpost in outposts:
        x,_,y = tuple(input(f"Enter the coordinate for the outpost {outpost}: "))
        stations[outpost] = (int(x),int(y))
    
    return stations


def generate_auto_requests():
    # print(stations)
    requests = defaultdict(lambda: defaultdict(int))
    requestingStations = []
    
    for outpost in outposts:
        item= choice(["medicines", "food", "fuel", "ammunations","none"], p=[0.05, 0.25, 0.15, 0.15, 0.4])
        if item != "none":
            quantity = choice(range(10,100))
            requests[outpost][item] = int(quantity)
            requestingStations.append(stations[outpost])
    
    return requests
    


# Function to take daily requests from the user
def get_user_requests():
    requests = defaultdict(lambda: defaultdict(int))
    for outpost in outposts:
        print(f"Enter requests for {outpost} (leave blank if no request):")
        while True:
            item = input("  Enter item (medicines, fuel, food) or 'done' to finish: ").strip().lower()
            if item == 'done':
                break
            if item not in truck_capacity:
                print("  Invalid item. Please enter 'medicines', 'fuel', or 'food'.")
                continue
            quantity = input(f"  Enter quantity for {item}: ").strip()
            if quantity.isdigit():
                requests[outpost][item] = int(quantity)
            else:
                print("  Invalid quantity. Please enter a number.")
    return requests

# Dummy function to simulate path generation
# def generatePath(shipment):
#     print("Generated path for shipment:")
#     for item, quantity in shipment.items():
#         print(f"  {item}: {quantity}")

# Function to process requests over a 5-day interval with sliding window
def process_requests(days=30):
    # sts = define_stations()
    # n = int(input("Enter the number of support vehicles available: "))
    # sts = test_file2.define_graph()
    n = 3
    req = []
    emergency_req = []

    
    window = deque(maxlen=5)
    cumulative_requests = defaultdict(int)

    for day in range(days):
        print(f"\nDay {day + 1}")
        # daily_requests = get_user_requests()
        daily_requests = generate_auto_requests()
        window.append(daily_requests)

        # Handle emergency shipments immediately
        for outpost, items in daily_requests.items():
            req.append(stations[outpost])
            if 'medicines' in items:
                quantity = items['medicines']
                emergency_req.append(stations[outpost])
                print(f"  Emergency shipment of {quantity} medicines to {outpost}")
                # shipment = {'medicines': quantity}
                # test_file2.generatePath(sts, req, shipment, n, emergency_req)
                # Reset the request for medicines after emergency shipment
                # del daily_requests[outpost]['medicines']
                # try:
                #     req.remove(stations[outpost])
                # except:
                #     pass

        # Display daily requests
        print(f"Day {day + 1}: Requests generated by outposts:")
        for outpost, items in daily_requests.items():
            for item, quantity in items.items():
                print(f"  {quantity} {item} requested by {outpost}")

        # Add current day's requests to cumulative
        for outpost, items in daily_requests.items():
            for item, quantity in items.items():
                cumulative_requests[item] += quantity

        # Prepare non-emergency shipment at the end of the day
        if len(window) == 5 or any(cumulative_requests[item] >= truck_capacity[item] for item in cumulative_requests):
            combined_shipment = defaultdict(int)

            # Check if requests are only for one type of item
            non_zero_items = [item for item, quantity in cumulative_requests.items() if quantity > 0]
            if len(non_zero_items) == 1:
                # If only one type of item is requested, disregard other capacities
                item = non_zero_items[0]
                total_quantity = cumulative_requests[item]
                max_truck_capacity = sum(truck_capacity.values())
                if total_quantity <= max_truck_capacity:
                    combined_shipment[item] = total_quantity
                else:
                    combined_shipment[item] = max_truck_capacity
            else:
                # Regular case: handle each item respecting its capacity
                for item, total_quantity in cumulative_requests.items():
                    if item != "medicines":  # Medicines have already been shipped as emergencies
                        if total_quantity <= truck_capacity[item]:
                            combined_shipment[item] = total_quantity
                        else:
                            combined_shipment[item] = truck_capacity[item]

            # Check if we need more trucks or need to outsource
            capacity_left_after = defaultdict(int)
            for item, total_quantity in cumulative_requests.items():
                capacity_left_after[item] = total_quantity - truck_capacity[item]
                if capacity_left_after[item] > 0:
                    # We need more trucks or need to outsource
                    while capacity_left_after[item] > 0:
                        if capacity_left_after[item] <= truck_capacity[item]:
                            combined_shipment[item] += capacity_left_after[item]
                            capacity_left_after[item] = 0
                        else:
                            combined_shipment[item] += truck_capacity[item]
                            capacity_left_after[item] -= truck_capacity[item]
                        # Simulate requesting more trucks or outsourcing
                        print(f"Requesting more trucks or outsourcing for {item}: {capacity_left_after[item]} units left")

            print(f"Day {day + 1}: Shipment prepared with combined requests within the 5-day window:")
            for item, quantity in combined_shipment.items():
                print(f"  {item}: {quantity}")


            # Reset cumulative requests for shipped items
            for item in combined_shipment.keys():
                cumulative_requests[item] = 0

            # Remove the oldest day's requests from cumulative if window is full
            if len(window) == 5:
                test_file2.generatePath(sts, req, combined_shipment, n, emergency_req)
                oldest_requests = window.popleft()
                for outpost, items in oldest_requests.items():
                    try:
                        req.remove(stations[outpost])
                    except:
                        pass
                    for item, quantity in items.items():
                        cumulative_requests[item] -= quantity

      

# Run the process for a few days for demonstration
# process_requests(days=5)


process_requests(5)
